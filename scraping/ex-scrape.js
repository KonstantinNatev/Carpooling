const puppeteer = require("puppeteer");
const fs = require("fs");
const path = require("path");

(async () => {
  const browser = await puppeteer.launch({ headless: false });
  const page = await browser.newPage();

  const collectedLogs = [];

  // –°–ª—É—à–∞–π –≤—Å–∏—á–∫–∏ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ –∑–∞—è–≤–∫–∏
  page.on("requestfinished", async (request) => {
    const url = request.url();

    if (
      url.includes("/trip/getSchedule") ||
      url.includes("/searchLinesByName")
    ) {
      try {
        const response = await request.response();
        const text = await response.text();
        const timestamp = new Date().toISOString();

        const payload = request.postData?.() || null;

        // –î–æ–±–∞–≤—è–Ω–µ –∫—ä–º –ª–æ–≥
        const logEntry = {
          timestamp,
          url,
          payload,
          response: text,
        };

        collectedLogs.push(logEntry);
        console.log(`üì° –ó–∞—Å–µ—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞: ${url}`);
        console.log("üì¶ Payload:", payload);
        console.log("‚úÖ –û—Ç–≥–æ–≤–æ—Ä:", text.slice(0, 300), "...");

        // –ê–∫–æ –µ getSchedule –∑–∞—è–≤–∫–∞, –∑–∞–ø–∏—à–∏ –æ—Ç–¥–µ–ª–Ω–æ —Ñ–∞–π–ª
        if (url.includes("/trip/getSchedule")) {
          try {
            const json = JSON.parse(text);
            const name = json.line?.name || "unknown";
            const extId = json.line?.ext_id || "no_extid";
            const filename = `schedules/${extId}_${name}.json`;

            fs.mkdirSync("schedules", { recursive: true });
            fs.writeFileSync(filename, JSON.stringify(json, null, 2), "utf-8");
            console.log(`üìÅ –ó–∞–ø–∏—Å–∞–Ω —Ñ–∞–π–ª: ${filename}`);
          } catch (e) {
            console.warn("‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–µ–Ω –∑–∞–ø–∏—Å –Ω–∞ –æ—Ç–¥–µ–ª–µ–Ω —Ñ–∞–π–ª:", e.message);
          }
        }
      } catch (e) {
        console.warn("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∑–∞—è–≤–∫–∞:", e.message);
      }
    }
  });

  // –û—Ç–∏–¥–∏ –¥–æ —Å–∞–π—Ç–∞ –∏ –∏–∑—á–∞–∫–∞–π —Ä—ä—á–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
  await page.goto("https://www.sofiatraffic.bg/bg/transport/schedules", {
    waitUntil: "networkidle2",
  });

  console.log("‚è≥ –ò–∑—á–∞–∫–∞–π 30 —Å–µ–∫—É–Ω–¥–∏ –∑–∞ —Ä—ä—á–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è...");
  await new Promise((resolve) => setTimeout(resolve, 30000));

  // –ó–∞–ø–∏—à–∏ –≤—Å–∏—á–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –æ–±—â JSON —Ñ–∞–π–ª
  fs.writeFileSync(
    "all_logs.json",
    JSON.stringify(collectedLogs.payload, null, 2),
    "utf-8"
  );
  console.log("‚úÖ –í—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏ –∑–∞–ø–∏—Å–∞–Ω–∏ –≤ all_logs.json");

  await browser.close();
})();
